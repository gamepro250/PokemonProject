//Snip Basic setup for one button on a small GUI window

public class Main extends Application implements EventHandler<ActionEvent>
{
	
	Button button ;
	
	public static void main(String[] args) 
	{
		launch(args);
	}
	
	
	
	@Override
	public void start(Stage primaryStage) throws Exception 
	{
		primaryStage.setTitle("Title of the Window") ;
		
		// Creates button and initializes text label
		button = new Button() ;
		button.setText("Click me") ;
		
		// When button is pressed, calls handle method
		button.setOnAction(this) ;
		
		StackPane layout = new StackPane() ;
		layout.getChildren().add(button) ;
		
		Scene scene = new Scene(layout, 300,250) ;
		primaryStage.setScene(scene) ;
		primaryStage.show() ;
	}
	
	@Override
	public void handle(ActionEvent event)
	{
		if(event.getSource()==button) // Detects what event action occurred and reacts based on that
		{
			System.out.println("Button pressed") ;
		}
	}
}

//Snip Basic setup to connect to a SQL database

public class DBQuery 
{

	// Connection to H2 SQL Server
	static String url = "jdbc:h2:./database/Pokedex;IFEXISTS=TRUE" ;
	static String user = "admin" ;
	static String password = "" ;	
	
	public static Connection connect()
	{
		try {
			Class.forName("org.h2.Driver") ;
			Connection connection = DriverManager.getConnection(url, user, password) ;
			return connection ;
		} catch (SQLException | ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	public static void disconnect(Connection connection)
	{
		try {
			connection.close() ;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}

//Snip Sample query

			String sql = "SELECT * FROM nationaldex where type1 like '%Electric%'" ; //Create SELECT statement
			
			Statement statement = connection.createStatement() ; //Create statement on the connection
			
			ResultSet result = statement.executeQuery(sql) ; //Create ResultSet for result to be stored
			
			
			while (result.next()) //iterate through selected rows
			{
				int number = result.getInt("nationaldex") ; //store Int from "NationalDex" column
				String name = result.getString("name") ; //store String from "Name" column
				String type = result.getString("type1") ;
				
				if(result.getString("type2") != null)
				{
					type += "/" + result.getString("type2") ;
				}
				
				
				System.out.println(number + ". " + name + " " + type) ;
			}
			
//Snip Create new scenes
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	
	 	Label label1 = new Label("Welcome to the first scene!") ;
	 	Button button1 = new Button("Go to scene 2") ;
	 	button1.setOnAction(e -> window.setScene(scene2)) ;
	 	
	 	//Layout 1 - children are laid out in vertical column
	 	VBox layout1 = new VBox(20) ;
	 	layout1.getChildren().addAll(label1,button1) ;
	 	scene1 = new Scene(layout1, 200, 200) ;

	 	// Button 2
	 	Button button2 = new Button("Return to scene 1") ;
	 	button2.setOnAction(e -> window.setScene(scene1)) ;
	 	
	 	StackPane layout2 = new StackPane() ;
	 	layout2.getChildren().add(button2) ;
	 	scene2 = new Scene(layout2, 600, 300) ;
	 	
	 	window.setScene(scene1) ;
	 	window.setTitle("Title here") ;
	 	window.show() ;
	 	
	}			
			
			
//Snip Class that crates new window as a popup
public class AlertBox
{
	
	public static void display(String title, String message)
	{
		Stage window = new Stage() ;
		
		window.initModality(Modality.APPLICATION_MODAL) ; // Must resolve this window before accessing other windows
		window.setTitle(title) ;
		window.setMinWidth(250) ;
		
		Label label = new Label() ;
		label.setText(message) ;
		Button closeButton = new Button("Close the window") ;
		closeButton.setOnAction(e -> window.close()) ;
		
		VBox layout = new VBox(10) ;
		layout.getChildren().addAll(label, closeButton) ;
		layout.setAlignment(Pos.CENTER) ;
		
		Scene scene = new Scene(layout) ;
		window.setScene(scene) ;
		window.showAndWait() ;
	} 
}			
			
			
//Snip Create popup window that returns something
public class Main extends Application
{
	Stage window ;
	Button button ;
	
	public static void main(String[] args)
	{
		launch(args) ;
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Test Window") ;
	 	
	 	button = new Button("Click Me") ;
	 	button.setOnAction(e -> {
	 		Boolean result = ConfirmBox.display("Popup Window", "Are you sure?");
	 		System.out.println(result) ;
	 		}) ; 
	 	
	 	StackPane layout = new StackPane() ;
	 	layout.getChildren().add(button) ;
	 	Scene scene = new Scene(layout,300, 250) ;
	 	window.setScene(scene) ;
	 	window.show() ;
	}
}

public class ConfirmBox
{
	static Boolean answer ;
	
	public static Boolean display(String title, String message)
	{
		Stage window = new Stage() ;		
		window.initModality(Modality.APPLICATION_MODAL) ;
		window.setTitle(title) ;
		window.setMinWidth(250) ;		
		Label label = new Label() ;
		label.setText(message) ;
		
		//Create two buttons
		Button yesButton = new Button("Yes") ;
		Button noButton	= new Button("No") ;
		
		yesButton.setOnAction(e -> {
			answer = true ;
			window.close() ;
			}) ;
		noButton.setOnAction(e -> {
			answer = false ;
			window.close() ;
			}) ;
		
		VBox layout = new VBox(10) ;
		layout.getChildren().addAll(label, yesButton, noButton) ;
		layout.setAlignment(Pos.CENTER) ;		
		Scene scene = new Scene(layout) ;
		window.setScene(scene) ;
		window.showAndWait() ;
		
		return answer ;
	} 
}			
			
//Snip Create confirmation dialouge box when attempting to close window, including cancelling the close.
public class Main extends Application
{
	Stage window ;
	Button button ;
	
	public static void main(String[] args)
	{
		launch(args) ;
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Test Window") ;	 	
	 	
	 	window.setOnCloseRequest(e -> {
	 		e.consume() ; //takes over control from default event
	 		closeProgram() ;
	 				
	 	}) ; // Runs method when closed via 'X' button
	 	
	 	button = new Button("Click Me") ;
	 	button.setOnAction(e -> closeProgram()) ; // Close program via in window button click

	 	
	 	StackPane layout = new StackPane() ;
	 	layout.getChildren().add(button) ;
	 	Scene scene = new Scene(layout,300, 250) ;
	 	window.setScene(scene) ;
	 	window.show() ;
	}
	
	private void closeProgram()
	{
		Boolean answer = ConfirmBox.display("Title", "Sure you want to exit?") ;
		if(answer)
			window.close() ;
		
	}
}

//Snip Create window with grid spacing with text boxes and buttons
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Test Window") ;	 	
	 	
	 	GridPane grid = new GridPane() ;
	 	grid.setPadding(new Insets(10,10,10,10)) ; //sets padding around the outside of the window
	 	grid.setVgap(8) ; //sets vertical spacing
	 	grid.setHgap(10) ; // sets horizontal spacing
	 	
	 	
	 	Label nameLabel = new Label("Username: ") ;
	 	GridPane.setConstraints(nameLabel, 0, 0) ;
	 		 	
	 	TextField nameInput = new TextField("Spider-Man") ; //sets default text in the field
	 	GridPane.setConstraints(nameInput, 1, 0) ;

	 	Label passLabel = new Label("Password: ") ;
	 	GridPane.setConstraints(passLabel, 0, 1) ;

	 	TextField passInput = new TextField() ;
	 	passInput.setPromptText("password") ;
	 	GridPane.setConstraints(passInput, 1, 1) ;
	 	
	 	Button loginButton = new Button("Log in") ;
	 	GridPane.setConstraints(loginButton, 1, 2) ;
	 	
	 	grid.getChildren().addAll(nameLabel, nameInput, passLabel, passInput, loginButton) ;
	 	
	 	Scene scene = new Scene(grid, 300, 200) ;
	 	window.setScene(scene) ;
	 	
	 	window.show() ;
	}

//Snip extract and validate input from a field
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Test Window") ;	 	
	 	
	 	TextField nameInput = new TextField() ;
	 	
	 	button = new Button("Click me") ;
	 	button.setOnAction(e -> isInt(nameInput, nameInput.getText())) ; //validates that the input is an integer
	 	
	 	
	 	VBox layout = new VBox(10) ;
	 	layout.setPadding(new Insets(20,20,20,20)) ;
	 	layout.getChildren().addAll(nameInput,button) ;
	 		
	 	Scene scene = new Scene(layout, 300, 250) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;
	}
	
	private boolean isInt(TextField input, String message) 
	{
		try
		{
			int age = Integer.parseInt(input.getText()) ; //tries to parse string to int and throws error if not an int
			System.out.println("User is: " + age) ;
			return true ;
		} catch (NumberFormatException e) //accessed if error is thrown
		{
			System.out.println("Error: " + message + " is not a number") ;
			return false ;
		}
	}

//Snip Checkboxes
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Checkbox Example") ;	 	
	 	
	 	CheckBox box1 = new CheckBox("Bacon") ;
	 	CheckBox box2 = new CheckBox("Tuna") ;
	 	box2.setSelected(true) ;
	 	
	 	button = new Button("Order Now!") ;
	 	button.setOnAction(e -> handleOptions(box1,box2)) ;
	 	
 		VBox layout = new VBox(10) ;
	 	layout.setPadding(new Insets(20,20,20,20)) ;
	 	layout.getChildren().addAll(box1, box2, button) ;
	 		
	 	Scene scene = new Scene(layout, 300, 250) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;
	}
	
	//handle checkbox options
	private void handleOptions(CheckBox box1, CheckBox box2) 
	{
		String message = "Users order:\n" ;
		
		if(box1.isSelected())
			message += "Bacon\n" ;

		
		if(box2.isSelected())
			message += "Tuna\n" ;
		
		System.out.println(message) ;
	}

//Snip create drop down menu that has a listener to detect selections
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Choicebox Example") ;	 	
	 	button = new Button("Press!") ;
	 	
	 	ChoiceBox<String> choiceBox = new ChoiceBox<>() ;
	 	
	 	// Add options to list
	 	choiceBox.getItems().add("Apples") ;
	 	choiceBox.getItems().add("Bananas") ;
	 	choiceBox.getItems().addAll("Bacon", "Ham", "Meatballs") ;
	 	choiceBox.setValue("Apples") ; // Initial value
	 	
	 	// Create listener to detect selection changes
	 	choiceBox.getSelectionModel().selectedItemProperty().addListener( (v, oldValue, newValue) -> System.out.println(newValue)) ;
	 	
	 	
	 	
	 	
 		VBox layout = new VBox(10) ;
	 	layout.setPadding(new Insets(20,20,20,20)) ;
	 	layout.getChildren().addAll(choiceBox, button) ;
	 		
	 	Scene scene = new Scene(layout, 300, 250) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;
	}

//Snip create drop down with custom inputs and built in listener
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Choicebox Example") ;	 	
	 	button = new Button("Press!") ;
	 	
	 	
	 	comboBox = new ComboBox<>() ;
	 	comboBox.getItems().addAll(
	 		"Back to the Future",
	 		"Lord of the Rings",
	 		"Harry Potter"
	 	) ;
	 	
	 	comboBox.setPromptText("What is your favorite movie?") ; // Sets initial text in the box when not editable
	 	
	 	comboBox.setEditable(true) ; // Allows custom entries from user
	 	
	 	comboBox.setOnAction( e -> System.out.println("User has selected: " + comboBox.getValue()));
	 	
 		VBox layout = new VBox(10) ;
	 	layout.setPadding(new Insets(20,20,20,20)) ;
	 	layout.getChildren().addAll(comboBox, button) ;
	 		
	 	Scene scene = new Scene(layout, 300, 250) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;
	}

//Snip Create list with multiple selectable options
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Choicebox Example") ;	 	
	 	button = new Button("Press!") ;
	 	
	 	listView = new ListView<>() ;
	 	listView.getItems().addAll("Iron man", "Titanic", "Contact", "Surrogates") ;
	 	listView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE) ; // Allows selection of multiple options
	 	
	 	button.setOnAction(e -> buttonClicked()) ;
	 	 
 		VBox layout = new VBox(10) ;
	 	layout.setPadding(new Insets(20,20,20,20)) ;
	 	layout.getChildren().addAll(listView, button) ;
	 		
	 	Scene scene = new Scene(layout, 300, 250) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;
	}

	private void buttonClicked()
	{
		String message = "" ;
		ObservableList<String> movies ;
		movies = listView.getSelectionModel().getSelectedItems() ;
		
		for(String m: movies)
		{
			message += m + "\n" ;
		}
		
		System.out.println(message) ;
	}

//Snip create a tree that monitors selections
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Choicebox Example") ;	 	
	 	
	 	TreeItem<String> root, billy, dan ;
	 	
	 	root = new TreeItem<>() ;
	 	root.setExpanded(true) ;
	 	
	 	billy = makeBranch("Billy", root) ;
	 	makeBranch("Java", billy) ;
	 	makeBranch("Pokemon", billy) ;
	 	makeBranch("Whiskey", billy) ;
	 	
	 	dan = makeBranch("Dan", root) ;
	 	makeBranch("Dota", dan) ;
	 	makeBranch("Pokemon", dan) ;
	 	makeBranch("Wine", dan) ;
	 	
	 	tree = new TreeView<>(root) ;
	 	tree.setShowRoot(false) ; // Hides the base level
	 	
	 	// Listener to print selection
	 	tree.getSelectionModel().selectedItemProperty().addListener( (v,oldValue,newValue) -> {
	 		if(newValue != null)
	 		{
	 			System.out.println(newValue.getValue()) ;
	 		}
	 	}) ;

	 	StackPane layout = new StackPane() ;
	 	layout.getChildren().add(tree) ;
	 	Scene scene = new Scene(layout, 300, 250) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;
	}
	
	// names the level and sets its parent branch
	private TreeItem<String> makeBranch(String name, TreeItem<String> parent) 
	{
		TreeItem<String> item = new TreeItem<>(name) ;
		item.setExpanded(true) ;
		parent.getChildren().add(item) ;
		return item ;
	}

//Snip Create menus (edit, file, etc) and add items to them
	public void start(Stage primaryStage) throws Exception
	{	
	 	window = primaryStage ;
	 	window.setTitle("Example") ;	 	

	 	//File menu
	 	//Create the menu header with the word File
	 	Menu fileMenu = new Menu("File") ;
	 	
	 	//Menu items
	 	//Create the items to be located under the File Menu
	 	MenuItem newFile = new MenuItem("New...") ;
	 	newFile.setOnAction(e -> System.out.println("Create new File")) ; //Have option do something on click
	 	fileMenu.getItems().add(newFile) ;
	 	
	 	fileMenu.getItems().add(new MenuItem("Open...")) ;
	 	fileMenu.getItems().add(new MenuItem("Save...")) ;
	 	fileMenu.getItems().add(new SeparatorMenuItem()) ;
	 	fileMenu.getItems().add(new MenuItem("Settings...")) ;
	 	fileMenu.getItems().add(new SeparatorMenuItem()) ;
	 	fileMenu.getItems().add(new MenuItem("Exit")) ;
	 	
	 	//Edit menu
	 	Menu editMenu = new Menu("_Edit") ; //Use underscore to make an option shortcut with Alt + letter
	 	editMenu.getItems().add(new MenuItem("Cut")) ;
	 	editMenu.getItems().add(new MenuItem("Copy")) ;

	 	MenuItem paste = new MenuItem("Paste") ;
	 	paste.setOnAction(e -> System.out.println("Pasting selected text")) ;
	 	paste.setDisable(true) ; //Disable/Enable option so it shows on menu but is not clickable
	 	editMenu.getItems().add(paste) ;
	 	
	 	//Main menu bar
	 	MenuBar menuBar = new MenuBar() ;
	 	menuBar.getMenus().addAll(fileMenu, editMenu) ;
	 	
	 	layout = new BorderPane() ;
	 	layout.setTop(menuBar) ;
	 	Scene scene = new Scene(layout,400,300) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;
	}

//Snip Use menu items with an on/off toggle (check menu items)
	 	Menu helpMenu = new Menu("Help") ;
	 	CheckMenuItem showLines = new CheckMenuItem("Show Line Numbers") ;
	 	showLines.setOnAction(e -> {
	 		if(showLines.isSelected())
	 			System.out.println("Program will now display line numbers") ;
	 		else
	 			System.out.println("Hiding line numbers") ;
	 	}) ;
	 	CheckMenuItem autoSave = new CheckMenuItem("Enable Autosave") ;
	 	autoSave.setSelected(true) ;
	 	helpMenu.getItems().addAll(showLines,autoSave) ;

//Snip add Radio menu
	 	//Difficulty RadioMenuItems
	 	Menu difficultyMenu = new Menu("Difficulty") ;
	 	ToggleGroup difficultyToggle = new ToggleGroup() ;
	 	RadioMenuItem easy = new RadioMenuItem("Easy") ;
	 	RadioMenuItem medium = new RadioMenuItem("Medium") ;
	 	RadioMenuItem hard = new RadioMenuItem("Hard") ;	 	
	 	easy.setToggleGroup(difficultyToggle) ;
	 	medium.setToggleGroup(difficultyToggle) ;
	 	hard.setToggleGroup(difficultyToggle) ;	 	
	 	difficultyMenu.getItems().addAll(easy,medium,hard) ;

//Snip Use CSS located in src/resources
	 	window = primaryStage ;
	 	window.setTitle("Example") ;	 	

	 	GridPane grid = new GridPane() ;
	 	grid.setPadding(new Insets(10,10,10,10)) ;
	 	grid.setVgap(8) ;
	 	grid.setHgap(10) ;
	 	
	 	Label nameLabel = new Label("Username: ") ;
	 	GridPane.setConstraints(nameLabel, 0, 0) ;

	 	TextField nameInput = new TextField() ;
	 	nameInput.setPromptText("Billy") ;
	 	GridPane.setConstraints(nameInput, 1, 0) ;	 	
	 	
	 	Label passLabel = new Label("Password: ") ;
	 	GridPane.setConstraints(passLabel, 0, 1) ;
	 	
	 	TextField passInput = new TextField() ;
	 	passInput.setPromptText("password") ;
	 	GridPane.setConstraints(passInput, 1, 1) ;
	 	
	 	Button loginButton = new Button("Log In") ;
	 	GridPane.setConstraints(loginButton, 1, 2) ;
	
	 	
	 	grid.getChildren().addAll(nameLabel, nameInput, passLabel, passInput, loginButton) ;

	 	Scene scene = new Scene(grid, 300, 200) ;
	 	
	 	File cssFile = new File("src/resources/Viper.css") ;
	 	String absCssPath = "file:///" + cssFile.getAbsolutePath().replace("\\","/").replace(" ","%20") ; //Use CSS file located in a separate file location
	 	scene.getStylesheets().add(absCssPath) ;
	 	window.setScene(scene) ;	 	
	 	window.show() ;










			